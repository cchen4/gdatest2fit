#roc.plot(res$status, res[,2], main="ROC Curve with CV", xlab="False Positive", ylab="True Positive")
AUC <- roc.area(res$status2, res[,2])
return(list(res, index.cv, AUC))
}
### nested gene selections wilcoxcon test in cross validation procedure
cv.f <- function(dat, K, m){
### assigning the id to each row of data to be used for create subsamples
sid <- resample (data=dat, K=K) ### 10 folds CV
c <- ncol(dat)
data.glm <- dat
res<-array(,dim=c(1,2))[-1,]
for (i in 1:K){
train.dat <- data.glm[sid!=i,]
test.dat <- data.glm[sid==i,]
status1<- ind <- train.dat[,c]
dmat <- t(train.dat[,1:(c-1)])
stat.pval <- rowWilcox(dmat, ind)
index.cv<-order(stat.pval, decreasing=F)[1:m]
#Select the 50 genes with the strongest statistical evidence of differential expression.
out.dat<- train.dat[,index.cv]
# create a dataset with containing only 50 genes
data.cv <- data.frame (out.dat, status1)
status2 <-test.dat[,c]
fit.logit <- glm ( status1 ~ ., family = binomial(link=logit), data=data.cv)
eta <- predict(fit.logit, newdata=test.dat[,index.cv], type=("response"))
out <- cbind(status2, eta)
res <- rbind.data.frame(res, out)
}
res <- data.frame(res)
roc(res$status2, res$eta, plot=T, smooth=T, main=paste("ROC for fitting with", m,"genes", sep=" " ))
AUC <- roc.area(res$status2, res$eta)
return(list(res, index.cv, AUC))
}
library(glmnet)
?cv.glmnet
ncv.lasso <- function (gex, k1, k2, m){
data.glm <-gex
gname <-(colnames(data.glm[,-max(ncol(data.glm))]))
### assigning the id to each row of data to be used for create subsamples
sid <- resample (data = gex  , K=k1) ### 10 folds CV
c <- ncol(data.glm)
res<-array(,dim=c(1,2))[-1,]
for (i in 1:k1){
### create test data and trainning data
train.dat <- data.glm[sid!=i,]
test.dat <- data.glm[sid==i,]
status1<- ind <- train.dat[,c]
dmat <- t(train.dat[,1:(c-1)])
stat.pval <- rowWilcox(dmat, ind)
index.cv<-order(stat.pval, decreasing=F)[1:m]
#Select the 50 genes with the strongest statistical evidence of differential expression.
x.lasso<- as.matrix(train.dat[,index.cv])
# create a dataset with containing only m genes
status2 <-test.dat[,c]
x.test <- as.matrix(test.dat[,index.cv])
# inner loop to determine the optimal lambda value for lasso regression
fit.lasso <- cv.glmnet(x.lasso, status1,  nfolds= k2, family="binomial", type.measure = "auc")
# predict the test data with optimal lambda value
eta <- predict(fit.lasso, newx=x.test, s= "lambda.min", type="response")
out <- cbind(status2, eta)
res <- rbind.data.frame(res, out)
b.name<-gname[which(coef(fit.lasso, s="lambda.min")!=0)]
# Parameter estimates for genes
b.coef<-coef(fit.lasso)[which(coef(fit.lasso, s="lambda.min")!=0)]
names(b.coef) <- b.name
length(b.coef)
cat("\n the coeficient of beta not equal 0 \n")
print(b.coef)
}
roc(res$status2, res[,2], plot=T, smooth=T, main=paste("ROC for fitting with", m,"genes", sep=" " ))
#roc.plot(res$status, res[,2], main="ROC Curve with CV", xlab="False Positive", ylab="True Positive")
AUC <- roc.area(res$status2, res[,2])
return(list(res, index.cv, AUC))
}
install.packages("RUnit")
test_rowWilcox <- function (){
index01 <- c(rep(1, 785), rep(0, 230))
data(subBRCA)
### ttest and wilcoxcon test result
tst <- rowWilcox(mat=log2(subBRCA+1), ind=index01)
checkEquals(as.vector(tst[[2]][1:5]), c("4.768716e-01", "1.172422e-20", "2.121971e-23", "5.935153e-01", "5.824864e-01"))
}
load("D:/Users/cchen4/OneDrive/Documents/Coursework/Fall 2015/BST550 Genomic Data Analysis/GDA-Project/gdatest2fit/data/subBRCA.rda")
library(xtable)
library(genefilter)
library(boot)
library(pROC)
library(verification)
library(glmnet)
setwd("D:/Cloud/OneDrive/Documents/Coursework/Fall 2015/BST550 Genomic Data Analysis/GDA-Project/gdatest2fit/data")
load("subBRCA.rda")
rowWilcox <- function(mat, ind){
pval <- rep("NA", dim(mat)[1])
datamat <- t(mat)
for (i in 1: dim(mat)[1]) {
outtest<-wilcox.test(datamat[,i]~ind, alternative = c("two.sided"), paired = FALSE, exact = NULL)
pval[i] <- outtest$p.value
}
pval <- as.numeric(pval)
return(pval)
}
rowWilcox()
test_rowWilcox()
library(RUnit)
sessionInfo()
test_rowWilcox()
test_rowWilcox <- function (){
index01 <- c(rep(1, 785), rep(0, 230))
#data(subBRCA)
### ttest and wilcoxcon test result
tst <- rowWilcox(mat=log2(subBRCA+1), ind=index01)
checkEquals(as.vector(tst[[2]][1:5]), c("4.768716e-01", "1.172422e-20", "2.121971e-23", "5.935153e-01", "5.824864e-01"))
}
test_rowWilcox()
checkEquals(as.vector(tst[[2]][1:5]), c(4.768716e-01, 1.172422e-20, 2.121971e-23, 5.935153e-01, 5.824864e-01))
test_rowWilcox <- function (){
index01 <- c(rep(1, 785), rep(0, 230))
#data(subBRCA)
### ttest and wilcoxcon test result
tst <- rowWilcox(mat=log2(subBRCA+1), ind=index01)
checkEquals(as.vector(tst[[2]][1:5]), c(4.768716e-01, 1.172422e-20, 2.121971e-23, 5.935153e-01, 5.824864e-01))
}
test_rowWilcox()
tst <- rowWilcox(mat=log2(subBRCA+1), ind=index01)
index01 <- c(rep(1, 785), rep(0, 230))
#data(subBRCA)
### ttest and wilcoxcon test result
tst <- rowWilcox(mat=log2(subBRCA+1), ind=index01)
result2tests<-function(dmat, index){
# equal variances is the default method for two sample rowttests
### control FDR=.05
dmat <- as.matrix(dmat)
ttest1<-rowttests(dmat, fac=as.factor(index))
wtest1<-rowWilcox(dmat, ind=index)
pval.t<-ttest1[,3]
pval.w<-wtest1
### unadjusted P-values
plot(log(pval.t), log(pval.w), xlab="p-value ttest", ylab="p-value wilcoxon", main="log scale")
abline(a=0,b=1,col=4,lwd=3)
hist(pval.t, nclass=50)
hist(pval.w, nclass=50)
### ajusted pval
pval.t <- p.adjust(pval.t, method = "fdr", n = length(pval.t))
pval.w <- p.adjust(pval.w, method= "fdr", n =length(pval.w))
prop1<-mean(I(pval.t<=.005), na.rm=T)
prop2<-mean(I(pval.t<=.05), na.rm=T)
prop3<-mean(I(pval.t<=.5), na.rm=T)
#cat("\n\nthe table of p-value at t test\n\n")
table1<-cbind(prop1, prop2, prop3)
colnames(table1)<-c("<=.005", "<=.05", "<=.5")
wprop1<-mean(I(pval.w<=.005), na.rm=T)
wprop2<-mean(I(pval.w<=.05),na.rm=T)
wprop3<-mean(I(pval.w<=.5),na.rm=T)
table2<-cbind(wprop1, wprop2, wprop3)
colnames(table2)<-c("<=.005", "<=.05", "<=.5")
#cat("\n\nthe table of p-value of wilcoxon test\n\n")
return(list(pval.t, pval.w, table1, table2))
}
tst[[2]]
tst
checkEquals(as.vector(tst[1:5]), c(4.768716e-01, 1.172422e-20, 2.121971e-23, 5.935153e-01, 5.824864e-01))
tst[1:5]
checkEquals(as.vector(tst[1:5]), c("4.768716e-01", "1.172422e-20", "2.121971e-23", "5.935153e-01", "5.824864e-01"))
checkEquals(as.character(tst[1:5]), c("4.768716e-01", "1.172422e-20", "2.121971e-23", "5.935153e-01", "5.824864e-01"))
as.vector(tst[1:5])
checkEquals(as.vector(tst[1:5]), c(4.067938e-01, 1.485597e-21, 2.163015e-24 ,5.230594e-01 ,5.117943e-01)
)
checkEquals(as.character(tst[1:3]), c("04.067938e-01", "1.485597e-21", "2.163015e-24"))
checkEquals(as.character(tst[1:3]), c("4.067938e-01", "1.485597e-21", "2.163015e-24"))
length(tst)
checkEquals(length(tst), 23368)
test_rowWilcox()
test_result2tests <- function (){
index01 <- c(rep(1, 785), rep(0, 230))
#data(subBRCA)
### ttest and wilcoxcon test result
tst <- result2tests(dmat=log2(subBRCA+1), index=index01)
checkTrue(is.list(tst))
checkEquals(length(tst[[1]]), 23368)
}
test_rowWilcox <- function (){
index01 <- c(rep(1, 785), rep(0, 230))
data(subBRCA)
## wilcoxcon test result
tst <- rowWilcox(mat=log2(subBRCA+1), ind=index01)
checkEquals(length(tst), 23368)
}
test_rowWilcox()
test_rowWilcox <- function (){
index01 <- c(rep(1, 785), rep(0, 230))
#data(subBRCA)
## wilcoxcon test result
tst <- rowWilcox(mat=log2(subBRCA+1), ind=index01)
checkEquals(length(tst), 23368)
}
test_rowWilcox()
test_result2tests()
### label the ID for each row of data.frame
resample <- function (data, K)
{
call <- match.call()
if (!exists(".Random.seed", envir = .GlobalEnv, inherits = FALSE))
runif(1)
seed <- get(".Random.seed", envir = .GlobalEnv, inherits = FALSE)
n <- nrow(data)
if ((K > n) || (K <= 1))
stop("'K' outside allowable range")
K.o <- K
K <- round(K)
kvals <- unique(round(n/(1L:floor(n/2))))
temp <- abs(kvals - K)
if (!any(temp == 0))
K <- kvals[temp == min(temp)][1L]
if (K != K.o)
warning(gettextf("'K' has been set to %f", K), domain = NA)
f <- ceiling(n/K)
s <- sample(rep(1L:K, f), n)
return(s)
}
test_resample<- function (){
testdat <- data.frame(matrix (rnorm(1000, 5, 2), ncol=10))
### ttest and wilcoxcon test result
tst <- resample(data=testdat, K=10)
checkEquals(max(tst), 10)
}
test_resample<- function (){
testdat <- data.frame(matrix (rnorm(1000, 5, 2), ncol=10))
### ttest and wilcoxcon test result
tst <- resample(data=testdat, K=10)
checkEquals(max(tst), 10)
}
### label the ID for each row of data.frame
resample <- function (data, K)
{
call <- match.call()
if (!exists(".Random.seed", envir = .GlobalEnv, inherits = FALSE))
runif(1)
seed <- get(".Random.seed", envir = .GlobalEnv, inherits = FALSE)
n <- nrow(data)
if ((K > n) || (K <= 1))
stop("'K' outside allowable range")
K.o <- K
K <- round(K)
kvals <- unique(round(n/(1L:floor(n/2))))
temp <- abs(kvals - K)
if (!any(temp == 0))
K <- kvals[temp == min(temp)][1L]
if (K != K.o)
warning(gettextf("'K' has been set to %f", K), domain = NA)
f <- ceiling(n/K)
s <- sample(rep(1L:K, f), n)
return(s)
}
test_resample()
### nested gene selections wilcoxcon test in cross validation procedure
cv.f <- function(dat, K, m){
### assigning the id to each row of data to be used for create subsamples
sid <- resample (data=dat, K=K) ### 10 folds CV
c <- ncol(dat)
data.glm <- dat
res<-array(,dim=c(1,2))[-1,]
for (i in 1:K){
train.dat <- data.glm[sid!=i,]
test.dat <- data.glm[sid==i,]
status1<- ind <- train.dat[,c]
dmat <- t(train.dat[,1:(c-1)])
stat.pval <- rowWilcox(dmat, ind)
index.cv<-order(stat.pval, decreasing=F)[1:m]
#Select the 50 genes with the strongest statistical evidence of differential expression.
out.dat<- train.dat[,index.cv]
# create a dataset with containing only 50 genes
data.cv <- data.frame (out.dat, status1)
status2 <-test.dat[,c]
fit.logit <- glm ( status1 ~ ., family = binomial(link=logit), data=data.cv)
eta <- predict(fit.logit, newdata=test.dat[,index.cv], type=("response"))
out <- cbind(status2, eta)
res <- rbind.data.frame(res, out)
}
res <- data.frame(res)
roc(res$status2, res$eta, plot=T, smooth=T, main=paste("ROC for fitting with", m,"genes", sep=" " ))
AUC <- roc.area(res$status2, res$eta)
return(list(res, index.cv, AUC))
}
test_cv.f<- function ()
{
status <- c(rep(1, 785), rep(0, 230))
data(subBRCA)
data.glm <- data.frame(log2(t(subBRCA)+1), status)
### ttest and wilcoxcon test result
tst <- cv.f(dat=data.glm, K=5, m=20)
checkTrue(is.list(tst))
}
test_cv.f()
test_cv.f<- function ()
{
status <- c(rep(1, 785), rep(0, 230))
#data(subBRCA)
data.glm <- data.frame(log2(t(subBRCA)+1), status)
### ttest and wilcoxcon test result
tst <- cv.f(dat=data.glm, K=5, m=20)
checkTrue(is.list(tst))
}
test_cv.f()
testdat <- matrix (rnrom(1000, 5, 2), ncol=100)
id <- rep(c(1,0), 50)
rowWilcox (mat=testdat, ind=id)
ncv.lasso <- function (gex, k1, k2, m){
data.glm <-gex
gname <-(colnames(data.glm[,-max(ncol(data.glm))]))
### assigning the id to each row of data to be used for create subsamples
sid <- resample (data = gex  , K=k1) ### 10 folds CV
c <- ncol(data.glm)
res<-array(,dim=c(1,2))[-1,]
for (i in 1:k1){
### create test data and trainning data
train.dat <- data.glm[sid!=i,]
test.dat <- data.glm[sid==i,]
status1<- ind <- train.dat[,c]
dmat <- t(train.dat[,1:(c-1)])
stat.pval <- rowWilcox(dmat, ind)
index.cv<-order(stat.pval, decreasing=F)[1:m]
#Select the 50 genes with the strongest statistical evidence of differential expression.
x.lasso<- as.matrix(train.dat[,index.cv])
# create a dataset with containing only m genes
status2 <-test.dat[,c]
x.test <- as.matrix(test.dat[,index.cv])
# inner loop to determine the optimal lambda value for lasso regression
fit.lasso <- cv.glmnet(x.lasso, status1,  nfolds= k2, family="binomial", type.measure = "auc")
# predict the test data with optimal lambda value
eta <- predict(fit.lasso, newx=x.test, s= "lambda.min", type="response")
out <- cbind(status2, eta)
res <- rbind.data.frame(res, out)
b.name<-gname[which(coef(fit.lasso, s="lambda.min")!=0)]
# Parameter estimates for genes
b.coef<-coef(fit.lasso)[which(coef(fit.lasso, s="lambda.min")!=0)]
names(b.coef) <- b.name
length(b.coef)
cat("\n the coeficient of beta not equal 0 \n")
print(b.coef)
}
roc(res$status2, res[,2], plot=T, smooth=T, main=paste("ROC for fitting with", m,"genes", sep=" " ))
#roc.plot(res$status, res[,2], main="ROC Curve with CV", xlab="False Positive", ylab="True Positive")
AUC <- roc.area(res$status2, res[,2])
return(list(res, index.cv, AUC))
}
test_ncv.lasso <- function(){
status <- c(rep(1, 785), rep(0, 230))
#data(subBRCA)
data.glm <- data.frame(log2(t(subBRCA)+1), status)
### ttest and wilcoxcon test result
tst <- ncv.lasso(gex=data.glm, k1=3, k2=5, m=1000)
checkTrue(is.list(tst))
}
testdat <- matrix (rnorm(1000, 5, 2), ncol=100)
id <- rep(c(1,0), 50)
rowWilcox (mat=testdat, ind=id)
testdat <- matrix (rnorm(1000, 5, 2), ncol=100)
id <- rep(c(1,0), 50)
out <- result2test (dmat=testdat, index=id)
testdat <- matrix (rnorm(1000, 5, 2), ncol=100)
id <- rep(c(1,0), 50)
out <- result2tests (dmat=testdat, index=id)
testdat <- data.frame(matrix (rnorm(1000, 5, 2), ncol=10))
sampleid <- resample (data=testdat, K=10)
status <-  c(rep(1, 785), rep(0, 230))
testdat <- data.frame(log2(t(subBRCA)+1), status)
cv.result <- cv.f (dat=testdat, K=5, m=5)
subBRCA1 <- matrix(rnorm(101500,50,5), nrow=1015)
status <-  c(rep(1, 785), rep(0, 230))
testdat <- data.frame(log2(t(subBRCA1)+1), status)
cv.result <- ncv.lasso (gex=testdat, k1=3, k2=5, m=5)
subBRCA1 <- matrix(rnorm(101500,50,5), nrow=1015)
status <-  c(rep(1, 785), rep(0, 230))
dim(subBRCA1)
subBRCA1 <- matrix(rnorm(101500,50,5), ncol=1015)
status <-  c(rep(1, 785), rep(0, 230))
testdat <- data.frame(log2(t(subBRCA1)+1), status)
cv.result <- ncv.lasso (gex=testdat, k1=3, k2=5, m=5)
subBRCA1 <- matrix(rnorm(101500,50,5), ncol=1015)
status <-  c(rep(1, 785), rep(0, 230))
testdat <- data.frame(log2(t(subBRCA1)+1), status)
cv.result <- cv.f (dat=testdat, K=5, m=5)
subBRCA1 <- matrix(rnorm(101500,12,5), ncol=1015)
status <-  c(rep(1, 785), rep(0, 230))
testdat <- data.frame(log2(t(subBRCA1)+1), status)
cv.result <- cv.f (dat=testdat, K=5, m=5)
subBRCA1 <- matrix(rnorm(101500, 12,5), ncol=1015)
subBRCA1 <- matrix(rnorm(101500, 12,5), ncol=1015)
cv.result <- cv.f (dat=testdat, K=5, m=50)
test_ncv.lasso()
library(gdatest2fit)
warnings
install.packages("Rtools")
getwd()
library(gdatest2fit)
browseVignettes("gdatest2fit")
library(DESeq2)
browseVignettes("DESeq2")
library(gdatest2fit)
browseVignettes("gdatest2fit")
library(knitr)
library(tools)
names(vignetteEngine(package = 'knitr'))
library(gdatest2fit)
browseVignettes("gdatest2fit")
test_ncv.lasso <- function(){
status <- c(rep(1, 785), rep(0, 230))
#data(subBRCA)
data.glm <- data.frame(log2(t(subBRCA)+1), status)
### ttest and wilcoxcon test result
tst <- ncv.lasso(gex=data.glm, k1=3, k2=5, m=1000)
checkTrue(is.list(tst))
}
ncv.lasso <- function (gex, k1, k2, m){
data.glm <-gex
gname <-(colnames(data.glm[,-max(ncol(data.glm))]))
### assigning the id to each row of data to be used for create subsamples
sid <- resample (data = gex  , K=k1) ### 10 folds CV
c <- ncol(data.glm)
res<-array(,dim=c(1,2))[-1,]
for (i in 1:k1){
### create test data and trainning data
train.dat <- data.glm[sid!=i,]
test.dat <- data.glm[sid==i,]
status1<- ind <- train.dat[,c]
dmat <- t(train.dat[,1:(c-1)])
stat.pval <- rowWilcox(dmat, ind)
index.cv<-order(stat.pval, decreasing=F)[1:m]
#Select the 50 genes with the strongest statistical evidence of differential expression.
x.lasso<- as.matrix(train.dat[,index.cv])
# create a dataset with containing only m genes
status2 <-test.dat[,c]
x.test <- as.matrix(test.dat[,index.cv])
# inner loop to determine the optimal lambda value for lasso regression
fit.lasso <- cv.glmnet(x.lasso, status1,  nfolds= k2, family="binomial", type.measure = "auc")
# predict the test data with optimal lambda value
eta <- predict(fit.lasso, newx=x.test, s= "lambda.min", type="response")
out <- cbind(status2, eta)
res <- rbind.data.frame(res, out)
b.name<-gname[which(coef(fit.lasso, s="lambda.min")!=0)]
# Parameter estimates for genes
b.coef<-coef(fit.lasso)[which(coef(fit.lasso, s="lambda.min")!=0)]
names(b.coef) <- b.name
length(b.coef)
cat("\n the coeficient of beta not equal 0 \n")
print(b.coef)
}
roc(res$status2, res[,2], plot=T, smooth=T, main=paste("ROC for fitting with", m,"genes", sep=" " ))
#roc.plot(res$status, res[,2], main="ROC Curve with CV", xlab="False Positive", ylab="True Positive")
AUC <- roc.area(res$status2, res[,2])
return(list(res, index.cv, AUC))
}
subBRCA1 <- matrix(rnorm(101500,50,5), ncol=1015)
status <-  c(rep(1, 785), rep(0, 230))
testdat <- data.frame(log2(t(subBRCA)+1), status)
cv.result <- ncv.lasso (gex=testdat, k1=3, k2=5, m=5)
library(genefilter)
library(xtable)
library(boot)
library(pROC)
library(verification)
library(glmnet)
status <-  c(rep(1, 785), rep(0, 230))
testdat <- data.frame(log2(t(subBRCA1)+1), status)
cv.result <- ncv.lasso (gex=testdat, k1=3, k2=2, m=5)
cv.result <- ncv.lasso (gex=testdat, k1=3, k2=3, m=5)
test_ncv.lasso <- function(){
status <- c(rep(1, 785), rep(0, 230))
subBRCA1 <- matrix(rnorm(101500,50,5), ncol=1015)
data.glm <- data.frame(log2(t(subBRCA1)+1), status)
### ttest and wilcoxcon test result
tst <- ncv.lasso(gex=data.glm, k1=3, k2=5, m=1000)
checkTrue(is.list(tst))
}
test_ncv.lasso()
test_ncv.lasso <- function(){
status <- c(rep(1, 785), rep(0, 230))
subBRCA1 <- matrix(rnorm(101500,50,5), ncol=1015)
data.glm <- data.frame(log2(t(subBRCA1)+1), status)
### ttest and wilcoxcon test result
tst <- ncv.lasso(gex=data.glm, k1=3, k2=5, m=5)
checkTrue(is.list(tst))
}
test_ncv.lasso()
dim(subBRCA1)
test_ncv.lasso <- function(){
status <- c(rep(1, 785), rep(0, 230))
subBRCA1 <- matrix(rnorm(101500,50,5), ncol=1015)
data.glm <- data.frame(log2(t(subBRCA1)+1), status)
### ttest and wilcoxcon test result
tst <- ncv.lasso(gex=data.glm, k1=3, k2=5, m=10)
checkTrue(is.list(tst))
}
test_ncv.lasso()
library(genefilter)
library(xtable)
library(boot)
library(pROC)
library(verification)
library(glmnet)
library('gdatest2fit')
library(genefilter)
library(xtable)
library(boot)
library(pROC)
library(verification)
library(glmnet)
load("res.rda")
library(BiocStyle)
library('gdatest2fit')
getwd()
source("http://bioconductor.org/biocLite.R")
